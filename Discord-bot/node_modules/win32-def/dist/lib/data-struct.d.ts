/**
Complex structure see:
https://github.com/waitingsong/node-win32-api/blob/master/packages/win32-api/src/data-struct-ext/
*/
/**
 * Struct usage:
 *
 * import * as Struct from 'ref-struct';
 * import { DStruct as DS, DModel as M } from 'win32-api';
 *
 * const point: M.PointStruct = new Struct(DS.POINT)();
 * point.x = 100;
 * point.y = 200;
 * // const buf = point.ref()
 *
 */
/** https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-alttabinfo */
export declare const ALTTABINFO: {
    cbSize: string;
    cItems: string;
    cColumns: string;
    cRows: string;
    iColFocus: string;
    iRowFocus: string;
    cxItem: string;
    cyItem: string;
    ptStart: string;
};
/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-copydatastruct */
export declare const COPYDATASTRUCT: {
    dwData: string;
    cbData: string;
    lpData: string;
};
/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-taghardwareinput */
export declare const HARDWAREINPUT: {
    uMsg: string;
    wParamL: string;
    wParamH: string;
};
export declare const INITCOMMONCONTROLSEX: {
    dwSize: string;
    dwICC: string;
};
/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagkeybdinput */
export declare const KEYBDINPUT: {
    wVk: string;
    wScan: string;
    dwFlags: string;
    time: string;
    dwExtraInfo: string;
};
/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagmouseinput */
export declare const MOUSEINPUT: {
    dx: string;
    dy: string;
    mouseData: string;
    dwFlags: string;
    time: string;
    dwExtraInfo: string;
};
/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-msg */
export declare const MSG: {
    hwnd: string;
    message: string;
    wParam: string;
    lParam: string;
    time: string;
    pt: string;
    lPrivate: string;
};
export declare const POINT: {
    x: string;
    y: string;
};
export declare const PROCESS_BASIC_INFORMATION: {
    Reserved1: string;
    PebBaseAddress: string;
    Reserved2: string;
    UniqueProcessId: string;
    InheritedFromUniqueProcessId: string;
};
export declare const UNICODE_STRING: {
    Length: string;
    MaximumLength: string;
    Buffer: string;
};
/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawhid */
export declare const RAWHID: {
    dwSizeHid: string;
    dwCount: string;
    /** bRawData[1] */
    bRawData: string;
};
/** https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputdevicelist */
export declare const RAWINPUTDEVICELIST: {
    hDevice: string;
    dwType: string;
};
/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinputheader */
export declare const RAWINPUTHEADER: {
    dwType: string;
    dwSize: string;
    hDevice: string;
    wParam: string;
};
/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawkeyboard */
export declare const RAWKEYBOARD: {
    MakeCode: string;
    Flags: string;
    Reserved: string;
    VKey: string;
    Message: string;
    ExtraInformation: string;
};
export declare const WINDOWINFO: {
    cbSize: string;
    rcWindow: string;
    rcClient: string;
    dwStyle: string;
    dwExStyle: string;
    dwWindowStatus: string;
    cxWindowBorders: string;
    cyWindowBorders: string;
    atomWindowType: string;
    wCreatorVersion: string;
};
/** https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633577(v=vs.85).aspx */
export declare const WNDCLASSEX: {
    cbSize: string;
    style: string;
    lpfnWndProc: string;
    cbClsExtra: string;
    cbWndExtra: string;
    hInstance: string;
    hIcon: string;
    hCursor: string;
    hbrBackground: string;
    lpszMenuName: string;
    lpszClassName: string;
    hIconSm: string;
};
export declare const RECT: {
    left: string;
    top: string;
    right: string;
    bottom: string;
};
export { RECT as _RECT };
/** https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime */
export declare const FILETIME: {
    dwLowDateTime: string;
    dwHighDateTime: string;
};
