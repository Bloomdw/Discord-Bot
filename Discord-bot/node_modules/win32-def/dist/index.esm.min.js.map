{"version":3,"file":"index.esm.min.js","sources":["lib/config.js","lib/helper.js","lib/windef.js","lib/marcomap.js","lib/data-struct.js","lib/data-union.js","index.js"],"sourcesContent":["// dict of windef value\nexport const _WIN64_HOLDER = '_WIN64_HOLDER_';\nexport const _UNICODE_HOLDER = '_UNICODE_HOLDER_';\nexport const windefSkipKeys = new Set(['macroMap']);\n/* istanbul ignore next */\nexport const _WIN64 = process.arch === 'x64';\n/* istanbul ignore next */\nexport const _UNICODE = true;\nexport const settingsDefault = {\n    singleton: true,\n    _UNICODE,\n    _WIN64,\n};\n// for validation\nexport const windefSet = new Set([\n    'bool',\n    'bool*',\n    'byte',\n    'byte*',\n    'char',\n    'uchar',\n    'char*',\n    'float',\n    'float*',\n    'int',\n    'int8',\n    'int16',\n    'int32',\n    'int64',\n    'int*',\n    'int8*',\n    'int16*',\n    'int32*',\n    'int64*',\n    'uint',\n    'uint8',\n    'uint16',\n    'uint32',\n    'uint64',\n    'uint*',\n    'uint8*',\n    'uint16*',\n    'uint32*',\n    'uint64*',\n    'int**',\n    'uint**',\n    'uint32**',\n    'uint64**',\n    'long',\n    'longlong',\n    'long*',\n    'longlong*',\n    'pointer',\n    'ushort',\n    'void',\n    'void*',\n]);\n","import { settingsDefault, windefSet, _UNICODE_HOLDER, _WIN64_HOLDER, } from './config';\n// convert macro variable of windef\nexport function parse_windef(windefObj, macroMap, settings) {\n    const ww = clone_filter_windef(windefObj); // output without macroMap\n    const macroSrc = prepare_macro(macroMap, settings);\n    const ret = prepare_windef_ref(ww, macroSrc);\n    validateWinData(ret, windefSet);\n    return ret;\n}\n/**\n * convert typeof array of param to string\n * such like ['_WIN64_HOLDER_', 'int64', 'int32'], no changed returning when string\n */\nfunction parse_param_placeholder(param, settings) {\n    if (typeof param === 'string') {\n        return param;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (!param) {\n        throw new Error('parse_param_placeholder(ps, settings) value of ps invalid');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (!Array.isArray(param) || param.length !== 3) {\n        throw new Error('parse_param_placeholder(ps, settings) value of ps must Array and has THREE elements');\n    }\n    const st = parse_settings(settings);\n    let ps = '';\n    switch (param[0]) {\n        case _WIN64_HOLDER:\n            ps = parse_placeholder_arch(param, st._WIN64);\n            break;\n        case _UNICODE_HOLDER:\n            ps = parse_placeholder_unicode(param, st._UNICODE);\n            break;\n        default:\n            throw new Error('the value of param placeholder invlaid:' + param[0]);\n    }\n    return ps;\n}\n// convert param like ['_WIN64_HOLDER_', 'int64', 'int32] to 'int64' or 'int32'\nfunction parse_placeholder_arch(param, _WIN64) {\n    if (typeof param === 'string') {\n        return param;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (!param || param.length !== 3) {\n        throw new Error('_WIN64 macro should be Array and has 3 items');\n    }\n    return _WIN64 ? param[1] : param[2];\n}\n// convert param like ['_UNICODE_HOLDER_', 'uint16*', 'uint8*'] to 'uint16*' or 'uint8*'\nfunction parse_placeholder_unicode(param, _UNICODE) {\n    if (typeof param === 'string') {\n        return param;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    else if (!param || param.length !== 3) {\n        throw new Error('_UNICODE macro should be Array and has 3 items');\n    }\n    return _UNICODE ? param[1] : param[2];\n}\n/**\n * parse ['_WIN64_HOLDER', 'int64*', 'int32*'] to 'int64*' or 'int32'\n * or ['_UNICODE_HOLDER_', 'uint16*', 'uint8*'] to 'uint16*' or 'uint8*'\n */\nfunction prepare_macro(macroMap, settings) {\n    const ret = new Map();\n    // v string|array\n    for (const [k, v] of macroMap.entries()) {\n        ret.set(k, parse_param_placeholder(v, settings));\n    }\n    return ret;\n}\n/**\n * parse const HANDLE = 'PVOID' to the realy FFIParam (like 'uint32*')\n * macroMap <['PVOID', 'uint32*'], ...>\n */\nfunction prepare_windef_ref(ww, macroSrc) {\n    const ret = {};\n    const map = new Map();\n    // first loop paser keys which exists in macroSrc\n    for (const x of Object.keys(ww)) {\n        /* istanbul ignore next */\n        if (map.has(x)) {\n            continue;\n        }\n        if (macroSrc.has(x)) { // PVOID:_WIN64_HOLDER -> PVOID:'uint64*'\n            const vv = macroSrc.get(x);\n            if (vv) {\n                map.set(x, vv);\n            }\n            else {\n                throw new Error(`Value of macroSrc item \"${x}\" blank`);\n            }\n        }\n        else {\n            continue; // not throw error\n        }\n    }\n    // 2nd loop paser key , maybe value refer other key\n    for (const [k, v] of Object.entries(ww)) {\n        /* istanbul ignore next */\n        if (map.has(k)) {\n            continue;\n        }\n        if (typeof v === 'string') {\n            if (windefSet.has(v)) {\n                map.set(k, v);\n            }\n            else {\n                const value = lookupRef(v, ww, macroSrc);\n                // tslint:disable-next-line\n                if (typeof value === 'string' && value) {\n                    map.set(k, value);\n                }\n                else {\n                    map.set(k, v); // maybe invalid for windefSet, will validateWinData() later\n                }\n            }\n        }\n        else {\n            throw new Error(`prepare_windef_ref() missing entry for k/v: ${k}/\"N/A\"`);\n        }\n    }\n    map.forEach((v, k) => {\n        ret[k] = v;\n    });\n    return ret;\n}\nfunction clone_filter_windef(windef) {\n    const ret = {};\n    for (const x of Object.keys(windef)) {\n        if (typeof windef[x] === 'string') {\n            Object.defineProperty(ret, x, {\n                value: windef[x],\n                writable: true,\n                enumerable: true,\n                configurable: true,\n            });\n        }\n        else {\n            throw new Error(`typeof value of ${x} NOT string`);\n        }\n    }\n    return ret;\n}\nfunction parse_settings(settings) {\n    const st = { ...settingsDefault };\n    if (typeof settings !== 'undefined' && Object.keys(settings).length) {\n        Object.assign(st, settings);\n    }\n    return st;\n}\nexport function lookupRef(key, ww, macroSrc) {\n    let ret = _lookupRef(key, ww, macroSrc);\n    if (!ret) {\n        return '';\n    }\n    for (let i = 0, len = 3; i < len; i += 1) {\n        const tmp = _lookupRef(ret, ww, macroSrc);\n        if (tmp) {\n            ret = tmp;\n        }\n        else {\n            break;\n        }\n    }\n    return ret;\n}\nfunction _lookupRef(key, ww, macroSrc) {\n    if (macroSrc.has(key)) {\n        return macroSrc.get(key);\n    }\n    // key is not valid FFIParam such 'int/uint...', like HMODULE: 'HANDLE'\n    if (typeof ww[key] === 'string') {\n        // parse HANDLE: 'PVOID' , PVOID already parsed\n        const ret = ww[key];\n        if (ret && macroSrc.has(ret)) { //  HANDLE:PVOID, macroSrc has PVOID\n            return macroSrc.get(ret);\n        }\n        return ret;\n    }\n    return '';\n}\n// valid parsed value exists in windefSet\nexport function isValidDataDef(key, srcSet) {\n    return !!srcSet.has(key);\n}\nexport function validateWinData(windef, srcSet) {\n    for (const [k, v] of Object.entries(windef)) {\n        if (!k || !v) {\n            throw new Error(`validateWinData() k or v empty: \"${k}\"/\"${v}\"`);\n        }\n        if (typeof v !== 'string') {\n            throw new Error(`validateWinData() v not typeof string: \"${k}\"/\"N/A\"`);\n        }\n        if (!isValidDataDef(v, srcSet)) {\n            throw new Error(`validateWinData() value is invalid ffi param value: \"${k}\"/\"${v}\", may extra space`);\n        }\n    }\n}\n","// windows data types for ref module https://github.com/TooTallNate/ref\n// https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751\nimport { _UNICODE_HOLDER, _WIN64_HOLDER, } from './config';\n/**\n * macro convert method\n * _WIN64_HOLDER or _UNICODE_HOLDER\n *\n * demo: const PVOID = _WIN64_HOLDER;\n */\nexport const ATOM = 'uint16';\nexport const DWORD = 'uint32';\nexport const PVOID = _WIN64_HOLDER;\n/**\n * `uint32` or `uint64` used as value usage (memory address) instead of PVOID (Buffer),\n * Use `HANDLE` (number) for params defintion of the api,\n * @see https://stackoverflow.com/questions/18266626/what-is-the-range-of-a-windows-handle-on-a-64-bits-application/29526711#29526711\n */\nexport const HANDLE = _WIN64_HOLDER;\n/**\n * `HANDLE_PVOID` (Buffer) can be used for definition of Struct,\n */\nexport const HANDLE_PVOID = 'PVOID';\nexport const LONG_PTR = _WIN64_HOLDER;\nexport const ULONG_PTR = _WIN64_HOLDER;\nexport const VOID = 'void';\nexport const WCHAR = 'uint16';\nexport const WORD = 'int16';\nexport const BOOL = 'int';\nexport const BOOLEAN = 'bool';\nexport const BYTE = 'byte';\nexport const CALLBACK = 'pointer'; // https://msdn.microsoft.com/en-us/library/windows/desktop/ms633573(v=vs.85).aspx\nexport const CCHAR = 'uint8';\nexport const CHAR = 'uint8';\nexport const COLORREF = 'DWORD';\n// export const CONST;\nexport const DWORDLONG = 'uint64';\nexport const DWORD_PTR = 'ULONG_PTR';\nexport const DWORD32 = 'uint32';\nexport const DWORD64 = 'uint64';\nexport const FLOAT = 'float';\nexport const HACCEL = 'HANDLE';\nexport const HALF_PTR = _WIN64_HOLDER;\nexport const HBITMAP = 'HANDLE';\nexport const HBRUSH = 'HANDLE';\nexport const HCOLORSPACE = 'HANDLE';\nexport const HCONV = 'HANDLE';\nexport const HCONVLIST = 'HANDLE';\nexport const HCURSOR = 'HANDLE';\nexport const HDC = 'HANDLE';\nexport const HDDEDATA = 'HANDLE';\nexport const HDESK = 'HANDLE';\nexport const HDROP = 'HANDLE';\nexport const HDWP = 'HANDLE';\nexport const HENHMETAFILE = 'HANDLE';\nexport const HFILE = 'HANDLE'; // typedef int HFILE;\nexport const HFONT = 'HANDLE';\nexport const HGDIOBJ = 'HANDLE';\nexport const HGLOBAL = 'HANDLE';\nexport const HHOOK = 'HANDLE';\nexport const HICON = 'HANDLE';\nexport const HINSTANCE = 'HANDLE';\nexport const HKEY = 'HANDLE';\nexport const HKL = 'HANDLE';\nexport const HLOCAL = 'HANDLE';\nexport const HMENU = 'HANDLE';\nexport const HMETAFILE = 'HANDLE';\nexport const HMODULE = HINSTANCE;\nexport const HMONITOR = 'HANDLE';\nexport const HPALETTE = 'HANDLE';\nexport const HPEN = 'HANDLE';\nexport const HRESULT = 'long';\nexport const HRGN = 'HANDLE';\nexport const HRSRC = 'HANDLE';\nexport const HSZ = 'HANDLE';\nexport const HWINEVENTHOOK = 'HANDLE';\nexport const HWINSTA = 'HANDLE';\nexport const HWND = 'HANDLE';\n/** A 32-bit signed integer */\nexport const INT = 'int';\nexport const INT_PTR = _WIN64_HOLDER;\nexport const INT8 = 'int8';\nexport const INT16 = 'int16';\nexport const INT32 = 'int32';\nexport const INT64 = 'int64';\nexport const LANGID = 'WORD';\nexport const LCID = 'DWORD';\nexport const LCTYPE = 'DWORD';\nexport const LGRPID = 'DWORD';\nexport const LONG = 'long';\nexport const LONGLONG = 'longlong';\nexport const LONG32 = 'int32';\nexport const LONG64 = 'int64';\nexport const LPARAM = 'LONG_PTR';\nexport const LPBOOL = 'BOOL';\nexport const LPBYTE = 'byte*';\nexport const LPCOLORREF = 'DWORD';\nexport const LPCSTR = 'uint8*';\nexport const LPCWSTR = 'uint16*';\nexport const LPCTSTR = _UNICODE_HOLDER;\nexport const LPVOID = 'void*';\nexport const LPCVOID = 'LPVOID';\nexport const LPDWORD = 'uint16*';\nexport const LPHANDLE = _WIN64_HOLDER; // A pointer to a HANDLE.\nexport const LPINT = 'int*';\nexport const LPLONG = 'int32*';\nexport const LPMSG = 'pointer'; // A pointer to a MSG\nexport const LPPOINT = 'pointer';\nexport const LPSTR = 'char*';\nexport const LPWSTR = 'uint16*';\nexport const LPTSTR = _UNICODE_HOLDER;\nexport const LPWORD = 'uint16*';\nexport const LRESULT = 'LONG_PTR';\nexport const NTSTATUS = 'uint32';\nexport const PBOOL = 'int*'; // ? 'bool*'\nexport const PBOOLEAN = 'bool*';\nexport const PBYTE = 'byte*';\nexport const PCHAR = 'char*';\nexport const PCSTR = 'uint8*';\nexport const PCTSTR = _WIN64_HOLDER;\nexport const PCWSTR = 'uint16*';\nexport const PDWORD = 'uint32*';\nexport const PDWORDLONG = 'uint64*';\nexport const PDWORD_PTR = 'DWORD_PTR';\nexport const PDWORD32 = 'uint32*';\nexport const PDWORD64 = 'uint64*';\nexport const PFLOAT = 'float*';\nexport const PHALF_PTR = 'pointer'; // ? A pointer to a HALF_PTR.\nexport const PHANDLE = _WIN64_HOLDER;\nexport const PHKEY = _WIN64_HOLDER;\nexport const PINT = 'int*';\nexport const PINT_PTR = 'int**';\nexport const PINT8 = 'int8*';\nexport const PINT16 = 'int16*';\nexport const PINT32 = 'int32*';\nexport const PINT64 = 'int64*';\nexport const PLCID = 'uint32*';\nexport const PLONG = 'long*';\nexport const PLONGLONG = 'int64*';\nexport const PLONG_PTR = 'pointer';\nexport const PLONG32 = 'int32*';\nexport const PLONG64 = 'int64*';\n// ? A 32-bit pointer. On a 32-bit system, this is a native pointer.\n// On a 64-bit system, this is a truncated 64-bit pointer.\nexport const POINTER_32 = _WIN64_HOLDER;\n// ? A 64-bit pointer. On a 64-bit system, this is a native pointer.\n// On a 32-bit system, this is a sign-extended 32-bit pointer.\nexport const POINTER_64 = _WIN64_HOLDER;\nexport const POINTER_SIGNED = 'pointer'; // ? A signed pointer.\nexport const POINTER_UNSIGNED = 'pointer'; // An unsigned pointer.\nexport const PSHORT = 'int16*';\nexport const PSIZE_T = 'ULONG_PTR'; // ?\nexport const PSSIZE_T = 'pointer';\nexport const PSTR = 'char*';\nexport const PTBYTE = _UNICODE_HOLDER;\nexport const PTCHAR = _UNICODE_HOLDER;\nexport const PTSTR = _UNICODE_HOLDER;\nexport const PUCHAR = 'pointer';\nexport const PUHALF_PTR = 'pointer';\nexport const PUINT = 'uint*';\nexport const PUINT_PTR = 'uint**';\nexport const PUINT8 = 'uint8*';\nexport const PUINT16 = 'uint16*';\nexport const PUINT32 = 'uint32*';\nexport const PUINT64 = 'uint64*';\nexport const PULONG = 'uint*';\nexport const PULONGLONG = 'uint64*';\nexport const PULONG_PTR = 'uint64**';\nexport const PULONG32 = 'uint*';\nexport const PULONG64 = 'uint64*';\nexport const PUSHORT = 'uint16*';\nexport const PWCHAR = 'uint16*';\nexport const PWORD = 'uint16*';\nexport const PWSTR = 'uint16*';\nexport const QWORD = 'uint64';\nexport const SC_HANDLE = 'HANDLE';\nexport const SC_LOCK = 'LPVOID';\nexport const SERVICE_STATUS_HANDLE = 'HANDLE';\nexport const SHORT = 'int16';\nexport const SIZE_T = 'ULONG_PTR';\nexport const SSIZE_T = 'LONG_PTR';\nexport const TBYTE = _UNICODE_HOLDER;\nexport const TCHAR = _UNICODE_HOLDER;\nexport const UCHAR = 'uchar';\nexport const UHALF_PTR = _WIN64_HOLDER;\nexport const UINT = 'uint';\nexport const UINT_PTR = _WIN64_HOLDER;\nexport const UINT8 = 'uint8';\nexport const UINT16 = 'uint16';\nexport const UINT32 = 'uint32';\nexport const UINT64 = 'uint64';\nexport const ULONG = 'uint';\nexport const ULONGLONG = 'uint64';\nexport const ULONG32 = 'uint32';\nexport const ULONG64 = 'uint64';\nexport const UNICODE_STRING = 'pointer';\nexport const USHORT = 'ushort';\nexport const USN = LONGLONG;\n// export const WINAPI;\nexport const WINEVENTPROC = 'pointer';\nexport const WNDENUMPROC = 'pointer';\nexport const WNDPROC = 'pointer';\n/**\n * Note: original be typedef UINT_PTR WPARAM;\n * CALLBACK WNDCLASSEX.lpfnWndProc may pass negative number and cause process exit.\n */\nexport const WPARAM = 'UINT_PTR';\n// A pointer to an INITCOMMONCONTROLSEX\nexport const LPINITCOMMONCONTROLSEX = 'pointer';\nexport const LPWNDCLASSEX = 'pointer'; // A pointer to a WNDCLASSEX\nexport const PWINDOWINFO = 'pointer'; // A pointer to a WINDOWINFO structure\nexport const PFILETIME = 'pointer'; // A pointer to a FILETIME\nexport const LPFILETIME = 'pointer'; // A pointer to a FILETIME\nexport const va_list = 'char*';\n/* ------------------ struct ---------------------- */\nexport const INITCOMMONCONTROLSEX = 'pointer';\nexport const MSG = 'pointer';\nexport const POINT = 'pointer';\nexport const WNDCLASSEX = 'pointer';\nexport const WINDOWINFO = 'pointer';\nexport const PRAWINPUTDEVICELIST = 'pointer';\nexport const RECT = 'pointer'; // _RECT\n","import { _UNICODE_HOLDER, _WIN64_HOLDER, } from './config';\nimport { LPCSTR, LPCWSTR, LPSTR, LPWSTR, WCHAR, } from './windef';\nexport const macroMap = new Map([\n    ['HANDLE', [_WIN64_HOLDER, 'uint64', 'uint32']],\n    ['PVOID', [_WIN64_HOLDER, 'uint64*', 'uint32*']],\n    ['HALF_PTR', [_WIN64_HOLDER, 'int32', 'int16']],\n    ['INT_PTR', [_WIN64_HOLDER, 'int64', 'int32']],\n    ['LONG_PTR', [_WIN64_HOLDER, 'int64', 'int32']],\n    ['LPCTSTR', [_UNICODE_HOLDER, LPCWSTR, LPCSTR]],\n    ['LPHANDLE', [_WIN64_HOLDER, 'uint64*', 'uint32*']],\n    ['LPTSTR', [_UNICODE_HOLDER, LPWSTR, 'uint8*']],\n    ['PCTSTR', [_WIN64_HOLDER, LPCWSTR, LPCSTR]],\n    ['PHANDLE', [_WIN64_HOLDER, 'uint64**', 'uint32**']],\n    ['PHKEY', [_WIN64_HOLDER, 'uint64*', 'uint32*']],\n    ['POINTER_32', [_WIN64_HOLDER, 'uint32*', 'uint32*']],\n    ['POINTER_64', [_WIN64_HOLDER, 'uint64*', 'uint32*']],\n    ['PTBYTE', [_UNICODE_HOLDER, 'int16*', 'int8*']],\n    ['PTCHAR', [_UNICODE_HOLDER, 'uint16*', 'uint8*']],\n    ['PTSTR', [_UNICODE_HOLDER, LPWSTR, LPSTR]],\n    ['TBYTE', [_UNICODE_HOLDER, 'int16', 'int8']],\n    ['TCHAR', [_UNICODE_HOLDER, WCHAR, 'uint8']],\n    ['UHALF_PTR', [_WIN64_HOLDER, 'uint32', 'uint16']],\n    ['UINT_PTR', [_WIN64_HOLDER, 'uint64', 'uint32']],\n    ['ULONG_PTR', [_WIN64_HOLDER, 'uint64', 'uint32']],\n]);\n","/* eslint-disable id-length */\n// windows data types struct for ref-struct module https://github.com/TooTallNate/ref-struct\n/**\nComplex structure see:\nhttps://github.com/waitingsong/node-win32-api/blob/master/packages/win32-api/src/data-struct-ext/\n*/\nimport { parse_windef } from './helper';\nimport { macroMap } from './marcomap';\nimport * as windef from './windef';\nconst W = parse_windef(windef, macroMap);\n/**\n * Struct usage:\n *\n * import * as Struct from 'ref-struct';\n * import { DStruct as DS, DModel as M } from 'win32-api';\n *\n * const point: M.PointStruct = new Struct(DS.POINT)();\n * point.x = 100;\n * point.y = 200;\n * // const buf = point.ref()\n *\n */\n/** https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-alttabinfo */\nexport const ALTTABINFO = {\n    cbSize: W.DWORD,\n    cItems: W.INT,\n    cColumns: W.INT,\n    cRows: W.INT,\n    iColFocus: W.INT,\n    iRowFocus: W.INT,\n    cxItem: W.INT,\n    cyItem: W.INT,\n    ptStart: W.POINT,\n};\n/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-copydatastruct */\nexport const COPYDATASTRUCT = {\n    dwData: W.ULONG_PTR,\n    cbData: W.DWORD,\n    lpData: W.PVOID,\n};\n/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-taghardwareinput */\nexport const HARDWAREINPUT = {\n    uMsg: W.DWORD,\n    wParamL: W.WORD,\n    wParamH: W.WORD,\n};\nexport const INITCOMMONCONTROLSEX = {\n    dwSize: W.DWORD,\n    dwICC: W.DWORD,\n};\n/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagkeybdinput */\nexport const KEYBDINPUT = {\n    wVk: W.WORD,\n    wScan: W.WORD,\n    dwFlags: W.DWORD,\n    time: W.DWORD,\n    dwExtraInfo: W.ULONG_PTR,\n};\n/** https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagmouseinput */\nexport const MOUSEINPUT = {\n    dx: W.LONG,\n    dy: W.LONG,\n    mouseData: W.DWORD,\n    dwFlags: W.DWORD,\n    time: W.DWORD,\n    dwExtraInfo: W.ULONG_PTR,\n};\n/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-msg */\nexport const MSG = {\n    hwnd: W.HWND,\n    message: W.UINT,\n    wParam: W.WPARAM,\n    lParam: W.LPARAM,\n    time: W.DWORD,\n    pt: W.POINT,\n    lPrivate: W.DWORD,\n};\n// https://msdn.microsoft.com/en-us/library/windows/desktop/dd162805(v=vs.85).aspx\nexport const POINT = {\n    x: W.LONG,\n    y: W.LONG,\n};\nexport const PROCESS_BASIC_INFORMATION = {\n    Reserved1: W.PVOID,\n    PebBaseAddress: W.PVOID,\n    Reserved2: W.PVOID,\n    UniqueProcessId: W.ULONG_PTR,\n    InheritedFromUniqueProcessId: W.PVOID,\n};\nexport const UNICODE_STRING = {\n    Length: W.USHORT,\n    MaximumLength: W.USHORT,\n    Buffer: W.PWSTR,\n};\n/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawhid */\nexport const RAWHID = {\n    dwSizeHid: W.DWORD,\n    dwCount: W.DWORD,\n    /** bRawData[1] */\n    bRawData: W.BYTE,\n};\n/** https://docs.microsoft.com/zh-cn/windows/win32/api/winuser/ns-winuser-rawinputdevicelist */\nexport const RAWINPUTDEVICELIST = {\n    hDevice: W.HANDLE,\n    dwType: W.DWORD,\n};\n/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawinputheader */\nexport const RAWINPUTHEADER = {\n    dwType: W.DWORD,\n    dwSize: W.DWORD,\n    hDevice: W.HANDLE,\n    wParam: W.WPARAM,\n};\n/** https://docs.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-rawkeyboard */\nexport const RAWKEYBOARD = {\n    MakeCode: W.USHORT,\n    Flags: W.USHORT,\n    Reserved: W.USHORT,\n    VKey: W.USHORT,\n    Message: W.UINT,\n    ExtraInformation: W.ULONG,\n};\nexport const WINDOWINFO = {\n    cbSize: W.DWORD,\n    rcWindow: W.RECT,\n    rcClient: W.RECT,\n    dwStyle: W.DWORD,\n    dwExStyle: W.DWORD,\n    dwWindowStatus: W.DWORD,\n    cxWindowBorders: W.UINT,\n    cyWindowBorders: W.UINT,\n    atomWindowType: W.ATOM,\n    wCreatorVersion: W.WORD,\n};\n/** https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms633577(v=vs.85).aspx */\nexport const WNDCLASSEX = {\n    cbSize: W.UINT,\n    style: W.UINT,\n    // 'lpfnWndProc': ffi.Function('int32', ['pointer', 'uint32', 'int32', 'uint32']) ,\n    lpfnWndProc: W.WNDPROC,\n    cbClsExtra: W.INT,\n    cbWndExtra: W.INT,\n    hInstance: W.HINSTANCE,\n    hIcon: W.HICON,\n    hCursor: W.HCURSOR,\n    hbrBackground: W.HBRUSH,\n    lpszMenuName: W.LPCTSTR,\n    lpszClassName: W.LPCTSTR,\n    hIconSm: W.HICON,\n};\nexport const RECT = {\n    left: W.LONG,\n    top: W.LONG,\n    right: W.LONG,\n    bottom: W.LONG,\n};\nexport { RECT as _RECT };\n/** https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime */\nexport const FILETIME = {\n    dwLowDateTime: W.DWORD,\n    dwHighDateTime: W.DWORD,\n};\n","/* eslint-disable id-length */\n// windows data types struct for ref-union module https://github.com/TooTallNate/ref-union\nimport { parse_windef } from './helper';\nimport { macroMap } from './marcomap';\nimport * as windef from './windef';\nconst W = parse_windef(windef, macroMap);\nexport const RID_DEVICE_INFO_DUMMYUNIONNAME = {\n    mouse: W.INT,\n    keyboard: W.INT,\n    hid: W.INT,\n};\n","/**\n * node-win32-def\n *\n * @author waiting\n * @license MIT\n * @link https://github.com/waitingsong/node-win32-def\n */\nimport * as Config from './lib/config';\nimport * as DStruct from './lib/data-struct';\nimport * as DUnion from './lib/data-union';\nimport * as FModel from './lib/ffi.model';\nimport { parse_windef } from './lib/helper';\nimport { macroMap } from './lib/marcomap';\nimport * as DModel from './lib/win.model';\nimport * as windef from './lib/windef';\nconst DTypes = parse_windef(windef, macroMap);\nexport { Config };\nexport { FModel }; // ffi model\nexport { DModel }; // model of window data types\nexport { DStruct }; // window constans data types of structure for ref-struct\nexport { DUnion }; // window constans data types of union for ref-union\nexport { DTypes }; // window data types\n"],"names":["_WIN64_HOLDER","_UNICODE_HOLDER","windefSkipKeys","Set","_WIN64","process","arch","_UNICODE","settingsDefault","singleton","windefSet","parse_windef","windefObj","macroMap","settings","ww","clone_filter_windef","macroSrc","prepare_macro","ret","prepare_windef_ref","validateWinData","parse_param_placeholder","param","Error","Array","isArray","length","st","parse_settings","ps","parse_placeholder_arch","parse_placeholder_unicode","Map","k","v","entries","set","map","x","Object","keys","has","vv","get","value","lookupRef","forEach","windef","defineProperty","writable","enumerable","configurable","assign","key","_lookupRef","i","len","tmp","isValidDataDef","srcSet","ATOM","DWORD","PVOID","HANDLE","HANDLE_PVOID","LONG_PTR","ULONG_PTR","VOID","WCHAR","WORD","BOOL","BOOLEAN","BYTE","CALLBACK","CCHAR","CHAR","COLORREF","DWORDLONG","DWORD_PTR","DWORD32","DWORD64","FLOAT","HACCEL","HALF_PTR","HBITMAP","HBRUSH","HCOLORSPACE","HCONV","HCONVLIST","HCURSOR","HDC","HDDEDATA","HDESK","HDROP","HDWP","HENHMETAFILE","HFILE","HFONT","HGDIOBJ","HGLOBAL","HHOOK","HICON","HINSTANCE","HKEY","HKL","HLOCAL","HMENU","HMETAFILE","HMODULE","HMONITOR","HPALETTE","HPEN","HRESULT","HRGN","HRSRC","HSZ","HWINEVENTHOOK","HWINSTA","HWND","INT","INT_PTR","INT8","INT16","INT32","INT64","LANGID","LCID","LCTYPE","LGRPID","LONG","LONGLONG","LONG32","LONG64","LPARAM","LPBOOL","LPBYTE","LPCOLORREF","LPCSTR","LPCWSTR","LPCTSTR","LPVOID","LPCVOID","LPDWORD","LPHANDLE","LPINT","LPLONG","LPMSG","LPPOINT","LPSTR","LPWSTR","LPTSTR","LPWORD","LRESULT","NTSTATUS","PBOOL","PBOOLEAN","PBYTE","PCHAR","PCSTR","PCTSTR","PCWSTR","PDWORD","PDWORDLONG","PDWORD_PTR","PDWORD32","PDWORD64","PFLOAT","PHALF_PTR","PHANDLE","PHKEY","PINT","PINT_PTR","PINT8","PINT16","PINT32","PINT64","PLCID","PLONG","PLONGLONG","PLONG_PTR","PLONG32","PLONG64","POINTER_32","POINTER_64","POINTER_SIGNED","POINTER_UNSIGNED","PSHORT","PSIZE_T","PSSIZE_T","PSTR","PTBYTE","PTCHAR","PTSTR","PUCHAR","PUHALF_PTR","PUINT","PUINT_PTR","PUINT8","PUINT16","PUINT32","PUINT64","PULONG","PULONGLONG","PULONG_PTR","PULONG32","PULONG64","PUSHORT","PWCHAR","PWORD","PWSTR","QWORD","SC_HANDLE","SC_LOCK","SERVICE_STATUS_HANDLE","SHORT","SIZE_T","SSIZE_T","TBYTE","TCHAR","UCHAR","UHALF_PTR","UINT","UINT_PTR","UINT8","UINT16","UINT32","UINT64","ULONG","ULONGLONG","ULONG32","ULONG64","UNICODE_STRING","USHORT","USN","WINEVENTPROC","WNDENUMPROC","WNDPROC","WPARAM","LPINITCOMMONCONTROLSEX","LPWNDCLASSEX","PWINDOWINFO","PFILETIME","LPFILETIME","va_list","INITCOMMONCONTROLSEX","MSG","POINT","WNDCLASSEX","WINDOWINFO","PRAWINPUTDEVICELIST","RECT","W","ALTTABINFO","cbSize","cItems","cColumns","cRows","iColFocus","iRowFocus","cxItem","cyItem","ptStart","COPYDATASTRUCT","dwData","cbData","lpData","HARDWAREINPUT","uMsg","wParamL","wParamH","dwSize","dwICC","KEYBDINPUT","wVk","wScan","dwFlags","time","dwExtraInfo","MOUSEINPUT","dx","dy","mouseData","hwnd","message","wParam","lParam","pt","lPrivate","y","PROCESS_BASIC_INFORMATION","Reserved1","PebBaseAddress","Reserved2","UniqueProcessId","InheritedFromUniqueProcessId","Length","MaximumLength","Buffer","RAWHID","dwSizeHid","dwCount","bRawData","RAWINPUTDEVICELIST","hDevice","dwType","RAWINPUTHEADER","RAWKEYBOARD","MakeCode","Flags","Reserved","VKey","Message","ExtraInformation","rcWindow","rcClient","dwStyle","dwExStyle","dwWindowStatus","cxWindowBorders","cyWindowBorders","atomWindowType","wCreatorVersion","style","lpfnWndProc","cbClsExtra","cbWndExtra","hInstance","hIcon","hCursor","hbrBackground","lpszMenuName","lpszClassName","hIconSm","left","top","right","bottom","FILETIME","dwLowDateTime","dwHighDateTime","RID_DEVICE_INFO_DUMMYUNIONNAME","mouse","keyboard","hid","DTypes"],"mappings":"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"}